setwd("~/Desktop/JunweiLu/Khan/Khan")
usethis::use_r("idx.map")
usethis::use_r("find_edge")
devtools::load_all()
usethis::use_r("find_cycles")
usethis::use_r("find_allshape")
usethis::use_r("get_var")
usethis::use_r("MyStat")
usethis::use_r("find_edge_cli")
usethis::use_r("SumRes")
usethis::use_r("idx_map")
usethis::use_r("moonshoot")
usethis::use_r("get_var_batch")
usethis::use_r("find_homo1")
usethis::use_r("find_homo2")
usethis::use_r("find_homo1_realdata")
usethis::use_r("find_paths")
usethis::use_r("find_trees")
usethis::use_r("find_allpaths")
usethis::use_r("find_alltrees")
devtools::check()
devtools::check()
devtools::document()
usethis::use_mit_license()
devtools::check()
usethis::use_package(ade4, type = "Imports", min_version = "1.720")
usethis::use_package("ade4", type = "Imports", min_version = "1.720")
usethis::use_package("Rcpp", type = "Imports", min_version = "1.0.9")
usethis::use_package("IsingSampler", type = "Imports", min_version ="0.2.1")
usethis::use_package("glasso", type = "Imports", min_version ="1.11")
usethis::use_package("CVglasso", type = "Imports", min_version ="1.0")
usethis::use_package("huge", type = "Imports", min_version ="1.3.5")
usethis::use_package("MASS", type = "Imports", min_version ="7.3-57")
usethis::use_package("ade4", type = "Imports", min_version = "1.7-20")
usethis::use_package("igraph", type = "Imports", min_version = "1.3.5")
usethis::use_package("Matrix", type = "Imports", min_version = "1.5-1")
usethis::use_package("cccd", type = "Imports", min_version = "1.6")
usethis::use_package("e1071", type = "Imports", min_version = "1.7-11")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
source("~/Desktop/JunweiLu/Khan/Khan/R/find_homo1_realdata.R", echo=TRUE)
usethis::use_r("set_bootstrap_normalize_test")
devtools::check()
devtools::check()
usethis::use_r("find_edge_tree")
devtools::check()
Find_edge.tree<-function(Node,type)
{
Edges = NULL
if(type=='a')
{
for(i in 1:(ncol(Node)-1) ){
Edges = cbind(Edges,Emap[cbind(Node[,i],Node[,i+1])])
}
}else if(type=='b')
{
Edges = cbind(Edges,Emap[cbind(Node[,1],Node[,2])])
Edges = cbind(Edges,Emap[cbind(Node[,1],Node[,4])])
Edges = cbind(Edges,Emap[cbind(Node[,1],Node[,5])])
Edges = cbind(Edges,Emap[cbind(Node[,2],Node[,3])])
}else
{
Edges = cbind(Edges,Emap[cbind(Node[,1],Node[,2])])
Edges = cbind(Edges,Emap[cbind(Node[,1],Node[,3])])
Edges = cbind(Edges,Emap[cbind(Node[,1],Node[,4])])
Edges = cbind(Edges,Emap[cbind(Node[,1],Node[,5])])
}
Edges = t(apply(Edges, 1, sort))
Edges = unique(Edges)
return(Edges)
}
devtools::check()
devtools::check()
devtools::check()
usethis::use_r("graph_debias")
devtools::check()
devtools::check()
devtools::check()
styler::style_pkg()
lintr::lint_package()
seed = 1;Setting=1;n=400;d=200;v=2;P=1;Beta=1;m=6
set.seed(seed)
G.size = d/P
J5a = choose(G.size,5)*60*P
J5b = choose(G.size,5)*60*P
J5c = choose(G.size,5)*5*P
Power5a = FDP5a = NULL
Power5b = FDP5b = NULL
Power5c = FDP5c = NULL
m = sample(6:10,1)
W = matrix(0,d,d)
theta = matrix(0,d,d)
omega = matrix(0,d,d)
W[upper.tri(W)] = v*runif(d*(d-1)/2,min=0,max=1)
W = W + t(W)
N = floor(d/m)
for(j in 1:N){
nWd = as.dist(max(W)-W[(m*(j-1)+1):(m*j), (m*(j-1)+1):(m*j)])
gpmst = mstree(nWd, 1)
theta[cbind(gpmst[,1],gpmst[,2]) + m*(j-1)] = 1
}
library(ade4)
m = sample(6:10,1)
W = matrix(0,d,d)
theta = matrix(0,d,d)
omega = matrix(0,d,d)
W[upper.tri(W)] = v*runif(d*(d-1)/2,min=0,max=1)
W = W + t(W)
N = floor(d/m)
for(j in 1:N){
nWd = as.dist(max(W)-W[(m*(j-1)+1):(m*j), (m*(j-1)+1):(m*j)])
gpmst = mstree(nWd, 1)
theta[cbind(gpmst[,1],gpmst[,2]) + m*(j-1)] = 1
}
theta = theta+t(theta)
omega[theta==1] = 1.5
omega[theta==0] = 0
# Response options (0,1 or -1,1):
Resp = c(-1L,1L)
X = NULL
for(j in 1:N)
{
Thresh = rep(0,m)
G = omega[(m*(j-1)+1):(m*j), (m*(j-1)+1):(m*j)]
diag(G) = 0
MetData = IsingSampler(n, G, Thresh, Beta, 1000/m,
responses = Resp, method = "direct")
X = cbind(X,as.matrix(MetData))
}
library(IsingSampler)
m = sample(6:10,1)
W = matrix(0,d,d)
theta = matrix(0,d,d)
omega = matrix(0,d,d)
W[upper.tri(W)] = v*runif(d*(d-1)/2,min=0,max=1)
W = W + t(W)
N = floor(d/m)
for(j in 1:N){
nWd = as.dist(max(W)-W[(m*(j-1)+1):(m*j), (m*(j-1)+1):(m*j)])
gpmst = mstree(nWd, 1)
theta[cbind(gpmst[,1],gpmst[,2]) + m*(j-1)] = 1
}
theta = theta+t(theta)
omega[theta==1] = 1.5
omega[theta==0] = 0
# Response options (0,1 or -1,1):
Resp = c(-1L,1L)
X = NULL
for(j in 1:N)
{
Thresh = rep(0,m)
G = omega[(m*(j-1)+1):(m*j), (m*(j-1)+1):(m*j)]
diag(G) = 0
MetData = IsingSampler(n, G, Thresh, Beta, 1000/m,
responses = Resp, method = "direct")
X = cbind(X,as.matrix(MetData))
}
if(d %% m != 0)
{
G = omega[((m*N)+1):d,((m*N)+1):d]
Thresh = rep(0,length(m*N+1:d))
diag(G) = 0
MetData = IsingSampler(n, G, Thresh, Beta, 1000/m,
responses = Resp, method = "direct")
X = cbind(X,as.matrix(MetData))
}
m = sample(6:10,1)
W = matrix(0,d,d)
theta = matrix(0,d,d)
omega = matrix(0,d,d)
W[upper.tri(W)] = v*runif(d*(d-1)/2,min=0,max=1)
W = W + t(W)
N = floor(d/m)
for(j in 1:N){
nWd = as.dist(max(W)-W[(m*(j-1)+1):(m*j), (m*(j-1)+1):(m*j)])
gpmst = mstree(nWd, 1)
theta[cbind(gpmst[,1],gpmst[,2]) + m*(j-1)] = 1
}
theta = theta+t(theta)
omega[theta==1] = 1.5
omega[theta==0] = 0
# Response options (0,1 or -1,1):
Resp = c(-1L,1L)
X = NULL
for(j in 1:N)
{
Thresh = rep(0,m)
G = omega[(m*(j-1)+1):(m*j), (m*(j-1)+1):(m*j)]
diag(G) = 0
MetData = IsingSampler(n, G, Thresh, Beta, 1000/m,
responses = Resp, method = "direct")
X = cbind(X,as.matrix(MetData))
}
if(d %% m != 0)
{
G = omega[((m*N)+1):d,((m*N)+1):d]
Thresh = rep(0,length(m*N+1:d))
diag(G) = 0
MetData = IsingSampler(n, G, Thresh, Beta, 1000/m,
responses = Resp, method = "direct")
X = cbind(X,as.matrix(MetData))
}///
?usethis::use_data()
usethis::use_data(omega,theta,W,X)
seed = 1;Setting = 1;n=300;d=250;v=1;m1=40;m2=20;m3=10;p1=1.5;p2=1.5;p3=0.95;min=0;max=5
d = 3*m1 + 4*m2 + 5*m3
set.seed(seed)
J1 = (d-1)*(d-2)/2
J2 = (d-2)*(d-3)/2
FDP = NULL
Power = NULL
omega = matrix(0,nrow=d,ncol=d)
theta = matrix(0,nrow=d,ncol=d)
j=0
for(i in 1:m1)
{
if(m1==0){break;}
temp = matrix(0,3,3)
temp[upper.tri(temp)] = runif(3,0,1)
temp = temp + t(temp)
theta[(j+3*(i-1)+1):(j+3*i),(j+3*(i-1)+1):(j+3*i)] = 1*(temp<p1)
omega[(j+3*(i-1)+1):(j+3*i),(j+3*(i-1)+1):(j+3*i)] = v*runif(1,min,max)*(temp<p1)
}
j=3*m1
for(i in 1:m2)
{
if(m2==0){break;}
temp = matrix(0,4,4)
temp[upper.tri(temp)] = runif(6,0,1)
temp = temp + t(temp)
theta[(j+4*(i-1)+1):(j+4*i),(j+4*(i-1)+1):(j+4*i)] = 1*(temp<p2)
omega[(j+4*(i-1)+1):(j+4*i),(j+4*(i-1)+1):(j+4*i)] = v*runif(1,min,max)*(temp<p2)
}
j=3*m1+4*m2
for(i in 1:m3)
{
if(m3==0){break;}
temp = matrix(0,5,5)
temp[upper.tri(temp)] = runif(10,0,1)
temp = temp + t(temp)
theta[(j+5*(i-1)+1):(j+5*i),(j+5*(i-1)+1):(j+5*i)] = 1*(temp<p3)
omega[(j+5*(i-1)+1):(j+5*i),(j+5*(i-1)+1):(j+5*i)] = v*runif(1,min,max)*(temp<p3)
}
diag(theta) = 0
diag(omega) = 0
mulist = seq(0,0.5,0.1)
eigenval = eigen(omega)$values
diag(omega) = diag(omega) + abs(min(eigenval)) + 0.2 #runif(1,0.1,0.5)
sigma = solve(omega)
X = mvrnorm(n, rep(0, d), sigma)
library(MASS)
omega = matrix(0,nrow=d,ncol=d)
theta = matrix(0,nrow=d,ncol=d)
j=0
for(i in 1:m1)
{
if(m1==0){break;}
temp = matrix(0,3,3)
temp[upper.tri(temp)] = runif(3,0,1)
temp = temp + t(temp)
theta[(j+3*(i-1)+1):(j+3*i),(j+3*(i-1)+1):(j+3*i)] = 1*(temp<p1)
omega[(j+3*(i-1)+1):(j+3*i),(j+3*(i-1)+1):(j+3*i)] = v*runif(1,min,max)*(temp<p1)
}
j=3*m1
for(i in 1:m2)
{
if(m2==0){break;}
temp = matrix(0,4,4)
temp[upper.tri(temp)] = runif(6,0,1)
temp = temp + t(temp)
theta[(j+4*(i-1)+1):(j+4*i),(j+4*(i-1)+1):(j+4*i)] = 1*(temp<p2)
omega[(j+4*(i-1)+1):(j+4*i),(j+4*(i-1)+1):(j+4*i)] = v*runif(1,min,max)*(temp<p2)
}
j=3*m1+4*m2
for(i in 1:m3)
{
if(m3==0){break;}
temp = matrix(0,5,5)
temp[upper.tri(temp)] = runif(10,0,1)
temp = temp + t(temp)
theta[(j+5*(i-1)+1):(j+5*i),(j+5*(i-1)+1):(j+5*i)] = 1*(temp<p3)
omega[(j+5*(i-1)+1):(j+5*i),(j+5*(i-1)+1):(j+5*i)] = v*runif(1,min,max)*(temp<p3)
}
diag(theta) = 0
diag(omega) = 0
mulist = seq(0,0.5,0.1)
eigenval = eigen(omega)$values
diag(omega) = diag(omega) + abs(min(eigenval)) + 0.2 #runif(1,0.1,0.5)
sigma = solve(omega)
X = mvrnorm(n, rep(0, d), sigma)
X
usethis::use_data(omega,sigma,theta,X)
